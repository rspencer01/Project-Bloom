#version 150

layout(points) in;
layout(points,max_vertices=72) out;

in vec4 vsPosition[];
in vec4 vsColour[];
in vec3 vsNorm[];

out vec4 gsColour;
out vec3 gsNorm;

layout(shared)uniform frameData
{
  mat4x4 transformationMatrix;
  vec4 cameraPos;
  mat4x4 projectionMatrix;  
};

layout(shared)uniform objectData
{
  mat4x4 objectMatrix;
  vec4 boundingSphere;
  int LODrows;
  int LODcols;
};

uniform int row;
uniform int column;

float scale = (1.0/max(LODrows,LODcols))/(boundingSphere.w);

mat4 proj = mat4(vec4(scale,0,0,0),vec4(0,scale,0,0),vec4(0,0,0.001,0),vec4(0,0,0,1));

mat4 Yrotation(float theta)
{
  return mat4(vec4(cos(theta),0,sin(theta),0),
              vec4(0,1,0,0),
              vec4(-sin(theta),0,cos(theta),0),
              vec4(0,0,0,1));
}

mat4 Xrotation(float theta)
{
  return mat4(vec4(1,0,0,0),
              vec4(0,cos(theta),sin(theta),0),
              vec4(0,-sin(theta),cos(theta),0),
              vec4(0,0,0,1));
}


void main() 
{
  if (column>-1)
  {
    float theta = -3.141592/2 + 3.141592*row/(LODrows);
    float phi = 2*3.141592/LODcols*column;
      {
        vec4 offset = vec4((column)*(2.0/LODcols)-(2.0/LODcols)*((LODcols-1)/2.0 ),(2.0/LODrows)*((LODrows-1)/2.0) -(row)*(2.0/LODrows),0,0);
        gl_Position = proj *Xrotation(theta) * Yrotation(phi) *  (vsPosition[0]-vec4(boundingSphere.xyz,0));
        gl_Position += offset;
        gsNorm = vsNorm[0];
        gsColour = vsColour[0];
        EmitVertex();
      }
  }
  else
  {
    gl_Position = projectionMatrix * transformationMatrix* objectMatrix * vsPosition[0];
    gsNorm = vsNorm[0];
    gsColour = vsColour[0];
    EmitVertex();
  }
  EndPrimitive();
}
