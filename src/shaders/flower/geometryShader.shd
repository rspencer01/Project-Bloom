#version 150

layout(points) in;
layout(triangle_strip,max_vertices=30) out;

in vec4 vsPosition[];
in vec4 vsColour[];
in vec3 vsNorm[];

out vec4 gsColour;
out vec3 gsNorm;
out vec2 gsTex;

layout(shared)uniform frameData
{
  mat4x4 transformationMatrix;
  vec4 cameraPos;
  mat4x4 projectionMatrix;  
};

layout(shared)uniform objectData
{
  vec4 boundingSphere;
};

int rows = 8;
int cols = 9;

float scale = (1.0/max(rows,cols))/(boundingSphere.w);

mat4 proj = mat4(vec4(scale,0,0,0),vec4(0,scale,0,0),vec4(0,0,0.001,0),vec4(0,0,0,1));

mat4 Yrotation(float theta)
{
  return mat4(vec4(cos(theta),0,sin(theta),0),
              vec4(0,1,0,0),
              vec4(-sin(theta),0,cos(theta),0),
              vec4(0,0,0,1));
}

mat4 Xrotation(float theta)
{
  return mat4(vec4(1,0,0,0),
              vec4(0,cos(theta),sin(theta),0),
              vec4(0,-sin(theta),cos(theta),0),
              vec4(0,0,0,1));
}

uniform sampler2D LODTexture;
void main() 
{
  float theta = 3.141592-acos((cameraPos.y-boundingSphere.y)/length(cameraPos.xyz-boundingSphere.xyz));
  float phi = 3.141592/2.0+atan(cameraPos.z-boundingSphere.z,cameraPos.x-boundingSphere.x) + (3.141592)/cols;
  phi = phi-mod(phi,2*3.141592/cols);
  int row = int(floor(theta/(3.141592/(rows))));
  int col = int(floor(phi/(2*3.141592/(cols))));

  gsNorm = vsNorm[0];
  gsColour = vec4(vec3(1),1);
  
  vec4 ps = Yrotation( phi ) * Xrotation(row * (3.141592/(rows) ) -3.141592/2) * vec4(-boundingSphere.w,-boundingSphere.w,0,1);
  gl_Position = projectionMatrix * transformationMatrix*ps+vec4(boundingSphere.xyz,0);
  gsTex = vec2(1-float(col)/cols,float(row)/rows);
  EmitVertex();
  ps = Yrotation( phi ) * Xrotation(row * (3.141592/(rows) ) -3.141592/2) * vec4(-boundingSphere.w,boundingSphere.w,0,1);
  gl_Position = projectionMatrix * transformationMatrix*ps+vec4(boundingSphere.xyz,0);
  gsTex = vec2(1-float(col)/cols,float(row+1)/rows);
  EmitVertex();
  ps = Yrotation( phi ) *Xrotation(row * (3.141592/(rows) ) -3.141592/2) *vec4(boundingSphere.w,-boundingSphere.w,0,1);
  gl_Position = projectionMatrix * transformationMatrix*ps+vec4(boundingSphere.xyz,0);
  gsTex = vec2(1-float(col+1)/cols,float(row)/rows);
  EmitVertex();
  ps = Yrotation( phi ) *Xrotation(row * (3.141592/(rows) ) -3.141592/2) *vec4(boundingSphere.w,boundingSphere.w,0,1);
  gl_Position = projectionMatrix * transformationMatrix*ps+vec4(boundingSphere.xyz,0);
  gsTex = vec2(1-float(col+1)/cols,float(row+1)/rows);
  EmitVertex();
  
/*  gl_Position = projectionMatrix * transformationMatrix* vsPosition[0];
  EmitVertex();*/
  EndPrimitive();
}
