#version 150

layout(points) in;
layout(points,max_vertices=30) out;

in vec4 vsPosition[];
in vec4 vsColour[];
in vec3 vsNorm[];

out vec4 gsColour;
out vec3 gsNorm;

layout(shared)uniform frameData
{
  mat4x4 transformationMatrix;
  vec4 cameraPos;
  mat4x4 projectionMatrix;  
};
/*
layout(shared)uniform objectData
{
  mat4x4 objectMatrix;
};*/

int rows = 5;
int cols = 6;

vec3 bboxbl = vec3(-0.1,0,-0.737);
vec3 bboxur = vec3(6.63,9.68,0.737);
vec3 midbb = (bboxbl + bboxur)/2;

vec4 bsphere = vec4(midbb,length(bboxur-midbb)/2);
float scale = (1.0/max(rows,cols))/(bsphere.w*2);

mat4 proj = mat4(vec4(scale,0,0,0),vec4(0,scale,0,0),vec4(0,0,0.001,0),vec4(0,0,0,1));


mat4 Yrotation(float theta)
{
  return mat4(vec4(cos(theta),0,sin(theta),0),
              vec4(0,1,0,0),
              vec4(-sin(theta),0,cos(theta),0),
              vec4(0,0,0,1));
}

mat4 Xrotation(float theta)
{
  return mat4(vec4(1,0,0,0),
              vec4(0,cos(theta),sin(theta),0),
              vec4(0,-sin(theta),cos(theta),0),
              vec4(0,0,0,1));
}


void main() 
{
/*
  gl_Position = projectionMatrix * transformationMatrix* vsPosition[0];
  gsNorm = vsNorm[0];
  gsColour = vsColour[0];
  EmitVertex();*/
  int count = 0;
  for (int j = 0; j<5;j++)
    for (int i = 0; i<6 ;i++)
    {
      vec4 offset = vec4((count%cols)*(2.0/cols)-(2.0/cols)*((cols-1)/2.0 ),(2.0/rows)*((rows-1)/2.0) -(count/cols)*(2.0/rows),0,0);
      gl_Position = proj *Xrotation(-3.141592/2 + 3.141592 / 4 *  j) * Yrotation(3.141592 * 2 / 6 *  i) *  (vsPosition[0]-vec4(bsphere.xyz,0));
      gl_Position += offset;
      gsNorm = vsNorm[0];
      gsColour = vsColour[0];
      EmitVertex();
      count++;
    }
  EndPrimitive();
}
